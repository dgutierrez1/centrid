// Centrid AI Filesystem - Database Types (Auto-generated from Supabase)
// Version: 3.1 - Supabase Plus MVP Architecture
//
// This file will be auto-generated by running:
// supabase gen types typescript --local > src/types/database.types.ts

export interface Database {
  public: {
    Tables: {
      user_profiles: {
        Row: {
          id: string;
          name: string | null;
          plan: "free" | "pro" | "enterprise";
          usage_count: number;
          subscription_status: "active" | "inactive" | "canceled" | "past_due";
          subscription_id: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id: string;
          name?: string | null;
          plan?: "free" | "pro" | "enterprise";
          usage_count?: number;
          subscription_status?: "active" | "inactive" | "canceled" | "past_due";
          subscription_id?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          name?: string | null;
          plan?: "free" | "pro" | "enterprise";
          usage_count?: number;
          subscription_status?: "active" | "inactive" | "canceled" | "past_due";
          subscription_id?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };
      usage_events: {
        Row: {
          id: string;
          user_id: string;
          event_type: "ai_request" | "document_processing" | "text_search";
          tokens_used: number;
          cost_usd: number;
          model_used: string | null;
          request_id: string | null;
          metadata: Record<string, any>;
          created_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          event_type: "ai_request" | "document_processing" | "text_search";
          tokens_used?: number;
          cost_usd?: number;
          model_used?: string | null;
          request_id?: string | null;
          metadata?: Record<string, any>;
          created_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          event_type?: "ai_request" | "document_processing" | "text_search";
          tokens_used?: number;
          cost_usd?: number;
          model_used?: string | null;
          request_id?: string | null;
          metadata?: Record<string, any>;
          created_at?: string;
        };
      };
      documents: {
        Row: {
          id: string;
          user_id: string;
          filename: string;
          file_type: "markdown" | "text" | "pdf";
          file_size: number;
          storage_path: string;
          processing_status: "pending" | "processing" | "completed" | "failed";
          content_text: string | null;
          search_vector: any; // tsvector type
          metadata: Record<string, any>;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          filename: string;
          file_type: "markdown" | "text" | "pdf";
          file_size: number;
          storage_path: string;
          processing_status?: "pending" | "processing" | "completed" | "failed";
          content_text?: string | null;
          search_vector?: any;
          metadata?: Record<string, any>;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          filename?: string;
          file_type?: "markdown" | "text" | "pdf";
          file_size?: number;
          storage_path?: string;
          processing_status?: "pending" | "processing" | "completed" | "failed";
          content_text?: string | null;
          search_vector?: any;
          metadata?: Record<string, any>;
          created_at?: string;
          updated_at?: string;
        };
      };
      document_chunks: {
        Row: {
          id: string;
          document_id: string;
          content: string;
          chunk_index: number;
          section_title: string | null;
          search_vector: any; // tsvector type
          metadata: Record<string, any>;
          created_at: string;
        };
        Insert: {
          id?: string;
          document_id: string;
          content: string;
          chunk_index: number;
          section_title?: string | null;
          search_vector?: any;
          metadata?: Record<string, any>;
          created_at?: string;
        };
        Update: {
          id?: string;
          document_id?: string;
          content?: string;
          chunk_index?: number;
          section_title?: string | null;
          search_vector?: any;
          metadata?: Record<string, any>;
          created_at?: string;
        };
      };
      agent_requests: {
        Row: {
          id: string;
          user_id: string;
          session_id: string | null;
          agent_type: "create" | "edit" | "research";
          content: string;
          status:
            | "pending"
            | "processing"
            | "completed"
            | "failed"
            | "cancelled";
          progress: number;
          results: Record<string, any>;
          context_documents: string[];
          model_used: string | null;
          tokens_used: number;
          cost_usd: number;
          error_message: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          session_id?: string | null;
          agent_type: "create" | "edit" | "research";
          content: string;
          status?:
            | "pending"
            | "processing"
            | "completed"
            | "failed"
            | "cancelled";
          progress?: number;
          results?: Record<string, any>;
          context_documents?: string[];
          model_used?: string | null;
          tokens_used?: number;
          cost_usd?: number;
          error_message?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          session_id?: string | null;
          agent_type?: "create" | "edit" | "research";
          content?: string;
          status?:
            | "pending"
            | "processing"
            | "completed"
            | "failed"
            | "cancelled";
          progress?: number;
          results?: Record<string, any>;
          context_documents?: string[];
          model_used?: string | null;
          tokens_used?: number;
          cost_usd?: number;
          error_message?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };
      agent_sessions: {
        Row: {
          id: string;
          user_id: string;
          session_name: string | null;
          request_chain: string[];
          context_state: Record<string, any>;
          last_activity_at: string;
          created_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          session_name?: string | null;
          request_chain?: string[];
          context_state?: Record<string, any>;
          last_activity_at?: string;
          created_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          session_name?: string | null;
          request_chain?: string[];
          context_state?: Record<string, any>;
          last_activity_at?: string;
          created_at?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      check_usage_limits: {
        Args: {
          user_id: string;
          request_type: string;
        };
        Returns: boolean;
      };
      user_owns_document: {
        Args: {
          doc_id: string;
          user_id: string;
        };
        Returns: boolean;
      };
      get_user_document_ids: {
        Args: {
          user_id: string;
        };
        Returns: string[];
      };
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}

// Type helpers for easier usage
export type Tables<T extends keyof Database["public"]["Tables"]> =
  Database["public"]["Tables"][T]["Row"];
export type TablesInsert<T extends keyof Database["public"]["Tables"]> =
  Database["public"]["Tables"][T]["Insert"];
export type TablesUpdate<T extends keyof Database["public"]["Tables"]> =
  Database["public"]["Tables"][T]["Update"];
export type Enums<T extends keyof Database["public"]["Enums"]> =
  Database["public"]["Enums"][T];

// Specific type exports for convenience
export type UserProfile = Tables<"user_profiles">;
export type UsageEvent = Tables<"usage_events">;
export type Document = Tables<"documents">;
export type DocumentChunk = Tables<"document_chunks">;
export type AgentRequest = Tables<"agent_requests">;
export type AgentSession = Tables<"agent_sessions">;

export type UserProfileInsert = TablesInsert<"user_profiles">;
export type UsageEventInsert = TablesInsert<"usage_events">;
export type DocumentInsert = TablesInsert<"documents">;
export type DocumentChunkInsert = TablesInsert<"document_chunks">;
export type AgentRequestInsert = TablesInsert<"agent_requests">;
export type AgentSessionInsert = TablesInsert<"agent_sessions">;

export type UserProfileUpdate = TablesUpdate<"user_profiles">;
export type UsageEventUpdate = TablesUpdate<"usage_events">;
export type DocumentUpdate = TablesUpdate<"documents">;
export type DocumentChunkUpdate = TablesUpdate<"document_chunks">;
export type AgentRequestUpdate = TablesUpdate<"agent_requests">;
export type AgentSessionUpdate = TablesUpdate<"agent_sessions">;
