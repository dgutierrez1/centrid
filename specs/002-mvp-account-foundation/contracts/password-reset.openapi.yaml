openapi: 3.1.0
info:
  title: MVP Account Foundation - Password Reset API
  description: Password reset flow (forgot password, reset password)
  version: 1.0.0
  contact:
    name: Centrid API Team

servers:
  - url: https://{project_id}.supabase.co/auth/v1
    description: Supabase Auth API (Production)
    variables:
      project_id:
        default: xxx
        description: Supabase project ID
  - url: http://localhost:54321/auth/v1
    description: Local Development

security:
  - ApiKey: []

tags:
  - name: Password Reset
    description: Forgot password and reset password operations

paths:
  /recover:
    post:
      tags:
        - Password Reset
      summary: Request password reset
      description: |
        Send password reset email to user.

        **Business Rules**:
        - Email must be valid format (FR-015)
        - Reset link expires in 1 hour (FR-016)
        - Link is single-use (invalidated after password reset)

        **Email Template**:
        - Subject: "Reset Your Password"
        - Contains secure link to /reset-password page
        - Link format: https://centrid.ai/reset-password?token=xxx&type=recovery

        **Security**:
        - Token is cryptographically signed
        - Signature verified by Supabase on reset
        - No sensitive data exposed in email
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Email of account to reset
                  example: user@example.com
            examples:
              valid:
                summary: Valid reset request
                value:
                  email: john@example.com
      responses:
        '200':
          description: |
            Reset email sent (always returns 200 even if email doesn't exist for security)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent. Check your inbox."
              examples:
                success:
                  summary: Email sent
                  value:
                    message: "Password reset email sent. Check your inbox."
        '400':
          description: Invalid email format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidEmail:
                  summary: Invalid email
                  value:
                    error: "Invalid email address format"
                    code: "VALIDATION_ERROR"
        '429':
          description: Too many reset requests (rate limited)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                rateLimited:
                  summary: Rate limit exceeded
                  value:
                    error: "Too many reset requests. Please try again later."
                    code: "RATE_LIMIT_EXCEEDED"
        '503':
          description: Email service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                serviceDown:
                  summary: Email service down
                  value:
                    error: "Service temporarily unavailable. Please try again."
                    code: "SERVICE_UNAVAILABLE"
                    retryable: true

  /user:
    put:
      tags:
        - Password Reset
      summary: Reset password with token
      description: |
        Set new password using secure reset token from email.

        **Business Rules**:
        - Token must be valid (not expired, not used) (FR-018)
        - New password minimum 6 characters (FR-017)
        - Token expires after 1 hour (FR-016, FR-018)
        - Token is single-use (invalidated after successful reset)

        **Security**:
        - Token signature verified by Supabase
        - JWT created after successful reset
        - User is automatically logged in after reset
      operationId: resetPassword
      security:
        - BearerAuth: []  # Token from email link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  description: New password (min 6 characters)
                  minLength: 6
                  maxLength: 255
                  example: "newsecurepass123"
            examples:
              valid:
                summary: Valid new password
                value:
                  password: "newsecurepass123"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - user
                  - session
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    type: object
                    description: New session (user is auto-logged in)
                    properties:
                      access_token:
                        type: string
                        description: JWT access token
                      refresh_token:
                        type: string
                        description: Refresh token
                      expires_at:
                        type: integer
                        description: Unix timestamp of session expiration
              examples:
                success:
                  summary: Password reset successful
                  value:
                    success: true
                    user:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      email: "john@example.com"
                    session:
                      access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token: "xxx-refresh-token-xxx"
                      expires_at: 1737560400
        '400':
          description: Invalid input (password too short)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                shortPassword:
                  summary: Password too short
                  value:
                    error: "Password must be at least 6 characters"
                    code: "VALIDATION_ERROR"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                expiredToken:
                  summary: Token expired
                  value:
                    error: "Password reset link has expired. Please request a new one."
                    code: "TOKEN_EXPIRED"
                invalidToken:
                  summary: Invalid token
                  value:
                    error: "Invalid password reset link."
                    code: "INVALID_TOKEN"
                usedToken:
                  summary: Token already used
                  value:
                    error: "This password reset link has already been used."
                    code: "TOKEN_USED"

components:
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: apikey
      description: Supabase ANON_KEY for public endpoints
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Password reset token from email link

  schemas:
    User:
      type: object
      description: User account (from auth.users)
      required:
        - id
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"

    Error:
      type: object
      description: Standard error response
      required:
        - error
        - code
      properties:
        error:
          type: string
          description: Human-readable error message
          example: "Invalid email address format"
        code:
          type: string
          description: Machine-readable error code
          example: "VALIDATION_ERROR"
        retryable:
          type: boolean
          description: Whether the operation can be retried
          example: true

x-business-rules:
  - id: FR-015
    description: Users can request password reset via email
  - id: FR-016
    description: Reset links are time-limited (1 hour expiration)
  - id: FR-017
    description: Users can set new password using valid reset link
  - id: FR-018
    description: Expired reset links rejected with clear error message

x-supabase-config:
  email_template: |
    <h2>Reset Your Password</h2>
    <p>You requested to reset your password for your Centrid account.</p>
    <p>Click the link below to reset your password (expires in 1 hour):</p>
    <p><a href="{{ .ConfirmationURL }}">Reset Password</a></p>
    <p>If you didn't request this, you can safely ignore this email.</p>
  redirect_url: /reset-password
  token_expiration: 3600  # 1 hour in seconds

x-frontend-integration:
  forgot_password_flow:
    step1: User enters email on /forgot-password page
    step2: Frontend calls POST /recover
    step3: User receives email with secure link
    step4: User clicks link, redirected to /reset-password?token=xxx
    step5: Frontend extracts token, displays reset form
    step6: User enters new password, frontend calls PUT /user with token
    step7: User is auto-logged in, redirected to /dashboard

  error_handling:
    - Token expired: Show "Link expired" message with "Request new link" button
    - Invalid token: Show "Invalid link" message with "Request new link" button
    - Network error: Show retry button with exponential backoff
