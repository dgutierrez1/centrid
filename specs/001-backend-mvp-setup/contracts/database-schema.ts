/**
 * Database Schema Contract
 *
 * TypeScript type definitions for database tables.
 * These types will be auto-generated by Drizzle from schema.ts
 * but are documented here for reference and validation.
 *
 * @generated This file will be auto-generated by Drizzle ORM
 * @see apps/api/src/db/schema.ts for source schema definitions
 */

// ============================================================================
// USER MANAGEMENT
// ============================================================================

export interface UserProfile {
  id: string;                      // uuid
  user_id: string;                 // uuid (FK → auth.users)
  name: string | null;
  plan_type: 'free' | 'pro' | 'enterprise';
  usage_count: number;             // AI requests this billing period
  subscription_status: 'active' | 'cancelled' | 'expired';
  created_at: Date;
  updated_at: Date;
}

export interface NewUserProfile {
  user_id: string;
  name?: string | null;
  plan_type?: 'free' | 'pro' | 'enterprise';
  usage_count?: number;
  subscription_status?: 'active' | 'cancelled' | 'expired';
}

// ============================================================================
// DOCUMENT MANAGEMENT
// ============================================================================

export interface Document {
  id: string;                      // uuid
  user_id: string;                 // uuid (FK → auth.users)
  filename: string;
  file_type: string;               // MIME type or extension
  file_size: number;               // bytes
  processing_status: 'pending' | 'processing' | 'completed' | 'failed';
  content_text: string | null;     // extracted full text
  search_vector: unknown;          // tsvector (PostgreSQL type)
  storage_path: string | null;     // Supabase Storage path
  created_at: Date;
  updated_at: Date;
}

export interface NewDocument {
  user_id: string;
  filename: string;
  file_type: string;
  file_size: number;
  processing_status?: 'pending' | 'processing' | 'completed' | 'failed';
  content_text?: string | null;
  storage_path?: string | null;
}

export interface DocumentChunk {
  id: string;                      // uuid
  document_id: string;             // uuid (FK → documents)
  chunk_index: number;             // 0-based order
  content: string;
  section_title: string | null;
  search_vector: unknown;          // tsvector
  created_at: Date;
}

export interface NewDocumentChunk {
  document_id: string;
  chunk_index: number;
  content: string;
  section_title?: string | null;
}

// ============================================================================
// AI AGENT EXECUTION
// ============================================================================

export interface AgentRequest {
  id: string;                      // uuid
  user_id: string;                 // uuid (FK → auth.users)
  agent_type: 'create' | 'edit' | 'research';
  content: string;                 // user prompt
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;                // 0.0 to 1.0
  results: Record<string, any> | null;  // jsonb
  token_cost: number | null;
  created_at: Date;
  updated_at: Date;
}

export interface NewAgentRequest {
  user_id: string;
  agent_type: 'create' | 'edit' | 'research';
  content: string;
  status?: 'pending' | 'processing' | 'completed' | 'failed';
  progress?: number;
  results?: Record<string, any> | null;
  token_cost?: number | null;
}

export interface AgentSession {
  id: string;                      // uuid
  user_id: string;                 // uuid (FK → auth.users)
  request_chain: string[];         // array of request IDs
  context_state: Record<string, any> | null;  // jsonb
  created_at: Date;
  updated_at: Date;
}

export interface NewAgentSession {
  user_id: string;
  request_chain?: string[];
  context_state?: Record<string, any> | null;
}

// ============================================================================
// USAGE TRACKING & BILLING
// ============================================================================

export interface UsageEvent {
  id: string;                      // uuid
  user_id: string;                 // uuid (FK → auth.users)
  event_type: string;              // agent_request/document_upload/etc
  tokens_used: number | null;
  cost: number | null;             // credits/currency
  metadata: Record<string, any> | null;  // jsonb
  created_at: Date;
}

export interface NewUsageEvent {
  user_id: string;
  event_type: string;
  tokens_used?: number | null;
  cost?: number | null;
  metadata?: Record<string, any> | null;
}

// ============================================================================
// DATABASE SCHEMA METADATA
// ============================================================================

export interface DatabaseSchema {
  tables: {
    user_profiles: UserProfile;
    documents: Document;
    document_chunks: DocumentChunk;
    agent_requests: AgentRequest;
    agent_sessions: AgentSession;
    usage_events: UsageEvent;
  };

  relationships: {
    'auth.users → user_profiles': '1:1';
    'auth.users → documents': '1:N';
    'documents → document_chunks': '1:N';
    'auth.users → agent_requests': '1:N';
    'auth.users → agent_sessions': '1:N';
    'auth.users → usage_events': '1:N';
  };
}

/**
 * Validation Helpers
 *
 * Use these to validate data before database operations.
 * Actual validation should use Zod schemas in runtime.
 */

export const PLAN_TYPES = ['free', 'pro', 'enterprise'] as const;
export const SUBSCRIPTION_STATUSES = ['active', 'cancelled', 'expired'] as const;
export const PROCESSING_STATUSES = ['pending', 'processing', 'completed', 'failed'] as const;
export const AGENT_TYPES = ['create', 'edit', 'research'] as const;
export const AGENT_STATUSES = ['pending', 'processing', 'completed', 'failed'] as const;

export type PlanType = typeof PLAN_TYPES[number];
export type SubscriptionStatus = typeof SUBSCRIPTION_STATUSES[number];
export type ProcessingStatus = typeof PROCESSING_STATUSES[number];
export type AgentType = typeof AGENT_TYPES[number];
export type AgentStatus = typeof AGENT_STATUSES[number];

/**
 * Database Connection Contract
 *
 * Expected interface for database client instances.
 */

export interface DatabaseClient {
  query: {
    userProfiles: any;  // Drizzle query API
    documents: any;
    documentChunks: any;
    agentRequests: any;
    agentSessions: any;
    usageEvents: any;
  };
}

/**
 * Migration Contract
 *
 * Expected interface for migration runner.
 */

export interface MigrationRunner {
  run: () => Promise<void>;
  rollback?: () => Promise<void>;
}

/**
 * RLS Policy Contract
 *
 * All tables MUST enforce these RLS policies.
 */

export interface RLSPolicies {
  SELECT: 'auth.uid() = user_id OR user owns parent entity';
  INSERT: 'auth.uid() = user_id';
  UPDATE: 'auth.uid() = user_id OR user owns parent entity';
  DELETE: 'auth.uid() = user_id OR CASCADE from parent';
}

/**
 * Usage Notes:
 *
 * 1. Import types from this file for type safety in Edge Functions
 * 2. Use NewX types for insert operations (omit generated fields)
 * 3. Use X types for select operations (includes all fields)
 * 4. Validate enums using exported constants (PLAN_TYPES, etc.)
 * 5. RLS policies are enforced at database level, not application level
 *
 * Example:
 *
 * ```typescript
 * import { db } from '@/db';
 * import type { NewDocument, Document } from './contracts/database-schema';
 *
 * const newDoc: NewDocument = {
 *   user_id: userId,
 *   filename: 'example.md',
 *   file_type: 'text/markdown',
 *   file_size: 1024,
 * };
 *
 * const inserted: Document = await db.insert(documents).values(newDoc).returning();
 * ```
 */
